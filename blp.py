# coding=utf-8
# 
# Look into XML trade file generated by Bloomberg, then:
# 
# 1. Extract trades of the Quant fund.
# 2. Extract everything else (trades, trade cancellations) into a new file.
# 


import xml.etree.ElementTree as ET
import logging
logger = logging.getLogger(__name__)



def fileToLines(file):
	"""
	[String] file => [List] lines

	read a text file and return its content as list of lines (String).
	"""
	return []



def stripXMLHeader(lines):
	"""
	[List] lines => [String] content after strip

	if the content has the below lines:

	<?xml version="1.0">
	<GenevaLoader xmlns=...>
	... content ...
	</GenevaLoader>

	Then strip the two lines of <GenevaLoader ...> at line 2 and </GenevaLoader>
	at the last line.
	"""
	return []



def linesToString(lines):
	"""
	[List] lines => [String] combined lines into one String
	"""
	return ''



def fileToTransactions(file):
	"""
	[String] file => [List] transactions

	Note: this version assumes:
	1. The root elements is <GenevaLoader>, with xmlns definitions.
	2. <GenevaLoader> had only one <TransactionRecords> child element that has
		all the transactions.

	For an example of such file, see samples/TransToGeneva20161223.xml
	"""
	tree = ET.parse(file)
	root = tree.getroot()

	ns = {
		'default': 'http://www.advent.com/SchemaRevLevel758/Geneva',
		'xsi': 'http://www.w3.org/2001/XMLSchema-instance'
	}

	for transaction in root[0]:
		portfolio = transaction.find('default:Portfolio', ns)
		if portfolio != None and portfolio.text != '12307':
			print(portfolio.text)
			root[0].remove(transaction)

	# write the tree as an XML file, but the file will have a default namespace
 	# ns0 attached to each element. 
	tree.write('output.xml')




def filterTransactions(transactions, portfolioId):
	"""
	[List] transactions => [List] transactions
	"""
	return []



def transactionsToString(transactions):
	"""
	[List] transactions => [String] content
	"""
	return ""



def writeFile(content, file):
	"""
	[String] content, [String] file => write content to file
	"""
	pass




if __name__ == '__main__':
	from blp_trade.utility import get_current_path
	import logging.config
	logging.config.fileConfig('logging.config', disable_existing_loggers=False)

	from os.path import join
	fileToTransactions(join(get_current_path(), 'samples', 'TransToGeneva20161223.xml'))
	# fileToTransactions(join(get_current_path(), 'samples', 'TransToGeneva20161223_noheader.xml'))

	